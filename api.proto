syntax = "proto3";

package pomerium.cli;
option go_package = "github.com/pomerium/cli/proto";
import "google/protobuf/timestamp.proto";

// Config represents desktop client configuration
service Config {
  // List returns records that match Selector
  rpc List(Selector) returns (Records);
  // Delete deletes records that match Selector
  rpc Delete(Selector) returns (DeleteRecordsResponse);
  // Upsert inserts (if no ID is provided) or updates records
  // you may omit the Connection data to just manipulate tags
  rpc Upsert(Record) returns (Record);
  // GetTags returns all tags. Note that tags are case sensitive
  rpc GetTags(GetTagsRequest) returns (GetTagsResponse);
  // Export dumps config into serialized format
  rpc Export(ExportRequest) returns (ConfigData);
  // Import imports previously serialized records
  rpc Import(ImportRequest) returns (ImportResponse);
}

// Record represents a single tunnel record in the configuration
message Record {
  // if omitted, a new record would be created
  optional string id = 1;
  repeated string tags = 2;
  // connection data may be omitted if i.e. just manipulating the tags data
  optional Connection conn = 3;
}

message Records { repeated Record records = 1; }

// Selector defines record filter
// one of the options must be set
// we do not use oneof as it results in inconveniences on the JS client side
message Selector {
  // all records
  bool all = 1;
  // only return connections matching tag(s)
  repeated string ids = 2;
  // only return specific connection(s)
  repeated string tags = 3;
}
message DeleteRecordsResponse {}

// Export dumps configuration (or subset of, based on provided tag filter)
// in the JSON format
message ExportRequest {
  Selector selector = 1;
  // remove_tags to strip tags from output
  bool remove_tags = 2;
  enum Format {
    EXPORT_FORMAT_UNDEFINED = 0;
    EXPORT_FORMAT_JSON_COMPACT = 1;
    EXPORT_FORMAT_JSON_PRETTY = 2;
  }
  Format format = 3;
}

message GetTagsRequest {};
message GetTagsResponse { repeated string tags = 1; }

message ConfigData { bytes data = 1; }

// ImportRequest would consume the previously exported data back,
// merging it with existing configuration,
// and performing de-duplication of the records so that multiple imports would
// yield the same result
message ImportRequest {
  // if set, all connections would receive that tag instead
  optional string override_tag = 1;
  bytes data = 2;
}

message ImportResponse {}

// Listener service controls listeners
service Listener {
  // Update alters connection status.
  rpc Update(ListenerUpdateRequest) returns (ListenerStatusResponse);
  // GetStatus returns current listener status for active tunnels
  rpc GetStatus(Selector) returns (ListenerStatusResponse);
  // StatusUpdates opens a stream to listen to connection status updates
  // a client has to subscribe and continuously
  // listen to the broadcasted updates
  rpc StatusUpdates(StatusUpdatesRequest) returns (stream ConnectionStatusUpdate);
}

message ListenerUpdateRequest {
  // omit connection ids to connect all connections
  repeated string connection_ids = 1;
  bool connected = 2;
}

message ListenerStatus {
  bool listening = 1;
  optional string listen_addr = 2;
  optional string last_error = 3;
}

message ListenerStatusResponse { map<string, ListenerStatus> listeners = 1; }

message StatusUpdatesRequest { string connection_id = 1; }

// ConnectionStatusUpdates represent connection state changes
message ConnectionStatusUpdate {
  // record this event relates to
  string id = 1;
  // peer_addr represents connecting party remote address and may be used to
  // distinguish between individual TCP connections
  optional string peer_addr = 2;
  enum ConnectionStatus {
    CONNECTION_STATUS_UNDEFINED = 0;
    CONNECTION_STATUS_CONNECTING = 1;
    CONNECTION_STATUS_AUTH_REQUIRED = 2;
    CONNECTION_STATUS_CONNECTED = 3;
    CONNECTION_STATUS_DISCONNECTED = 4;
    // listener is up; peer_addr would not be set
    CONNECTION_STATUS_LISTENING = 5;
    // listener is closed; peer_addr would not be set
    CONNECTION_STATUS_CLOSED = 6;
  }
  ConnectionStatus status = 3;
  // in case the connection failed or terminated, last error may be available
  optional string last_error = 4;
  // provides an authentication URL when AUTH_REQUIRED status is set
  optional string auth_url = 5;
  // event timestamp
  google.protobuf.Timestamp ts = 6;
}

// Connection
message Connection {
  // name is a user friendly connection name that a user may define
  optional string name = 1;
  // remote_addr is a remote pomerium host:port
  string remote_addr = 2;
  // listen_address, if not provided, will assign a random port each time
  optional string listen_addr = 3;
  // the URL of the pomerium server to connect to
  optional string pomerium_url = 4;
  oneof tls_options {
    bool disable_tls_verification = 5;
    bytes ca_cert = 6;
  }
}
